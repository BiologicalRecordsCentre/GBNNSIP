@using MySql.Data.MySqlClient;
@using System.Configuration;
@{
    Layout = null;
    var title = "GBNN native range map";
    var message = "";
    var sid = "";
    int speciesid = 0;
    var Nrregions = "";
    var Nrcountries = "";
    var Nrcontinents = "";
    var qryRegion = "";
    var vRegionNm = "";

    var ctx = HttpContext.Current;

    if (!Request.QueryString["idspecies"].IsEmpty())
    {
        sid = Request.QueryString["idspecies"];
    }
    else if (!String.IsNullOrEmpty(ctx.Request.Url.Segments.Last()))
    {
        sid = ctx.Request.Url.Segments.Last();
    }
    else { message = "No species id found for native range map"; }

    MySqlConnection nrConn = null;
    MySqlDataReader nrReader = null;

    if (sid.Length < 9) { speciesid = int.Parse(sid); }

    string connStr = ConfigurationManager.ConnectionStrings["strGBnn"].ConnectionString;
    string cmdStr = "SELECT r.object_id, nr.region_id, r.name FROM native_range nr " +
                           "LEFT JOIN region r ON r.region_id = nr.region_id " +
                           "WHERE nr.species_id = @sid";

    if (speciesid > 0)
    {
        nrConn = new MySqlConnection(connStr);
        nrConn.Open();
        MySqlCommand nrCmd = new MySqlCommand(cmdStr, nrConn);
        nrCmd.Prepare();
        nrCmd.Parameters.Add("@sid", MySqlDbType.Int32).Value = sid;
        nrReader = nrCmd.ExecuteReader();
        var i = 0;
        while (nrReader.Read())
        {
            if (i > 0)
            {
                if (!nrReader.IsDBNull(0) && !Nrcountries.ToString().IsEmpty()) { Nrcountries += ","; vRegionNm += ", "; }
                if (!nrReader.IsDBNull(1) && nrReader.GetInt32(1) != 0 && nrReader.GetInt32(1) < 100 && nrReader.GetInt32(1) > 9 && !Nrregions.IsEmpty()) { Nrregions += ","; vRegionNm += ", "; }
                if (!nrReader.IsDBNull(1) && nrReader.GetInt32(1) != 0 && nrReader.GetInt32(1) < 10 && Nrcontinents.IsEmpty()) { Nrcontinents += ","; vRegionNm += ", "; }
            }
            if (!nrReader.IsDBNull(0)) { Nrcountries += nrReader.GetInt32(0); vRegionNm += nrReader.GetString(2); }
            if (!nrReader.IsDBNull(1) && nrReader.GetInt32(1) != 0 && nrReader.GetInt32(1) < 100 && nrReader.GetInt32(1) > 9) { Nrregions += nrReader.GetInt32(1); vRegionNm += nrReader.GetString(2); }
            if (!nrReader.IsDBNull(1) && nrReader.GetInt32(1) != 0 && nrReader.GetInt32(1) < 10) { Nrcontinents += nrReader.GetInt32(1); vRegionNm += nrReader.GetString(2); }

            i++;
        }

        if (!Nrcountries.IsEmpty() && Nrregions.IsEmpty() && !Nrcontinents.IsEmpty())
        {
            qryRegion = "ID IN (" + Nrcountries + ")";
        }
        else if (!Nrregions.IsEmpty() && Nrcountries.IsEmpty())
        {
            qryRegion = "LEVEL_2_RE IN (" + Nrregions + ")";
        }
        else if (!Nrcountries.IsEmpty() && !Nrregions.IsEmpty())
        {
            qryRegion = "ID IN (" + Nrcountries + ") ";
            qryRegion += "OR LEVEL_2_RE IN (" + Nrregions + ")";
        }
        else if (!Nrcontinents.IsEmpty() && !Nrcountries.IsEmpty() && Nrregions.IsEmpty())
        {
            qryRegion = "LEVEL_1_CO IN (" + Nrcontinents + ")";
            qryRegion += "OR ID IN (" + Nrcountries + ") ";
        }
        else if (!Nrcontinents.IsEmpty() && Nrcountries.IsEmpty() && Nrregions.IsEmpty())
        {
            qryRegion = "LEVEL_1_CO IN (" + Nrcontinents + ")";
        }
        else
        {
            qryRegion = "";
        }
        message = vRegionNm;
    }
    else
    {
        message = "idspecies has got no value included.";
    }
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
    <title>@title</title>
    <style>
        html,
        body,
        #viewDiv {
            padding: 0;
            margin: 0;
            height: 100%;
            width: 100%;
        }

        #infoDiv {
            background-color: white;
            color: black;
            padding: 6px;
            width: 400px;
        }
    </style>
    <link rel="stylesheet" href="https://js.arcgis.com/4.10/esri/css/main.css">
    <script src="https://js.arcgis.com/4.10/"></script>
    <script>
       require([
            "esri/Map",
            "esri/views/MapView",
           "esri/layers/FeatureLayer",
           "esri/widgets/Home"
       ], function (Map,
           MapView,
           FeatureLayer,
           Home
       ){

         var vRegion = "@qryRegion";

           if (vRegion) {
            // Create the FeatureLayer using filter fields
            var nonnativeLayer = new FeatureLayer({
                url: "http://192.171.199.203/arcgis/rest/services/gbnnNativeRange/MapServer/0",
                definitionExpression: "@qryRegion",
                opacity: 0.9
                });

            var map = new Map({
                basemap: "streets",
                //layers: [nonnativeLayer]
            });
            map.add(nonnativeLayer);

            var view = new MapView({
                container: "viewDiv",
                map: map,
                zoom: 3,
                center: [15, 45] // longitude, latitude
            });

            var homeWidget = new Home({
                view: view
            });

            // adds the home widget to the top left corner of the MapView
            view.ui.add(homeWidget, {
                position: "top-left"
            });

            view.ui.add(document.getElementById("infoDiv"), {
                position: "top-right"
            });
          }
        });
    </script>
</head>
<body>
    <div id="infoDiv">@message</div>
    <div id="viewDiv"></div>
</body>
</html>