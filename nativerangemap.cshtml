@{
    Layout = null;
    var title = "GBNN native range map";
    var message = "";
    var speciesid = "";
    var ctx = HttpContext.Current;

    if (!Request.QueryString["idspecies"].IsEmpty())
    {
        speciesid = Request.QueryString["idspecies"];
    }
    else if (!String.IsNullOrEmpty(ctx.Request.Url.Segments.Last()))
    {
        speciesid = ctx.Request.Url.Segments.Last();
    }
    else { message = "No species id found for native range map"; }

}

<!DOCTYPE html>
<html>
<head>
    <title>@title</title>
    <link rel="stylesheet" href="https://openlayers.org/en/v4.5.0/css/ol.css" type="text/css">
    <!-- The line below is only needed for old environments like Internet Explorer and Android 4.x -->
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL"></script>
    <script src="https://openlayers.org/en/v4.5.0/build/ol.js"></script>
    <script src="http://code.jquery.com/jquery-3.2.1.min.js"></script>
</head>
<body>
    <div id="map" class="map"></div>
    <div id="info">&nbsp;</div>
    <script>
        var Nrregions = '';
        var Nrcountries = '';
        var Nrcontinents = '';
        var speciesid = parseInt(@speciesid);
        var uri = 'NativeRange/' + speciesid.toString();
        var i = 0;
        var qry;

        if (speciesid > 0) {
            $.ajax({
                url: uri,
                type: "GET",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data, status, xhr) {
                    $.each(data, function (key, val) {
                        if (key > 0) {
                            i++;
                            if (val.objIds !== 0 && Nrcountries.length > 0) Nrcountries += ",";
                            if (val.regionIds !== 0 && val.regionIds < 100 && val.regionIds > 9 && Nrregions.length > 0) Nrregions += ",";
                            if (val.regionIds !== 0 && val.regionIds < 10 && Nrcontinents.length > 0) Nrcontinents += ",";
                        }
                        if (val.objIds !== 0) Nrcountries += val.objIds.toString();
                        if (val.regionIds !== 0 && val.regionIds < 100 && val.regionIds > 9) Nrregions += val.regionIds.toString();
                        if (val.regionIds !== 0 && val.regionIds < 10) Nrcontinents += val.regionIds.toString();
                    });
                },
                error: function (xqr, errorMessage) {
                    alert(errorMessage);
                }
            });

           // alert(Nrcountries, Nrregions, Nrcontinents);

            if (Nrcountries.length !== 0 && Nrregions == 0 && Nrcontinents.length !== 0) {
                qry = 'ID IN (' + Nrcountries + ')';
            } else if (Nrregions.length !== 0 && Nrcountries == 0) {
                qry = 'LEVEL_2_RE IN (' + Nrregions + ')';
            } else if (Nrcountries.length !== 0 && Nrregions.length !== 0) {
                qry = 'ID IN (' + Nrcountries + ') ';
                qry += 'OR LEVEL_2_RE IN (' + Nrregions + ')';
            } else if (Nrcontinents.length !== 0 && Nrcountries.length !== 0 && Nrregions == 0) {
                qry = 'LEVEL_1_CO IN (' + Nrcontinents + ')';
                qry += 'OR ID IN (' + Nrcountries + ') ';
            } else if (Nrcontinents.length !== 0 && Nrcountries == 0 && Nrregions == 0) {
                qry = 'LEVEL_1_CO IN (' + Nrcontinents + ')';
            }
            else {
                qry = '';
            }
        }

        var serviceUrl = 'http://192.171.199.203/arcgis/rest/services/gbnnNativeRange/MapServer/';
        var layer = '0';

        var esrijsonFormat = new ol.format.EsriJSON();
        var style = new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(225, 225, 225, 0.35)'
                }),
                stroke: new ol.style.Stroke({
                    color: 'rgba(255, 0, 0, 0.35)',
                    width: 2
                })
            });

        var vectorSource = new ol.source.Vector({
            loader: function (extent, resolution, projection) {
                var url = serviceUrl + layer + '/query/?where='+qry+'&f=json&' +
                    'returnGeometry=true&spatialRel=esriSpatialRelIntersects&geometry=' +
                    encodeURIComponent('{"xmin":' + extent[0] + ',"ymin":' +
                        extent[1] + ',"xmax":' + extent[2] + ',"ymax":' + extent[3] +
                        ',"spatialReference":{"wkid":102100}}') +
                    '&geometryType=esriGeometryEnvelope&inSR=102100&outFields=*' +
                    '&outSR=102100';
                $.ajax({
                    url: url, dataType: 'jsonp', success: function (response) {
                        if (response.error) {
                            alert(response.error.message + '\n' +
                                response.error.details.join('\n'));
                        } else {
                            // dataProjection will be read from document
                            var features = esrijsonFormat.readFeatures(response, {
                                featureProjection: projection
                            });
                            if (features.length > 0) {
                                vectorSource.addFeatures(features);
                            }
                        }
                    }
                });
            },
            strategy: ol.loadingstrategy.tile(ol.tilegrid.createXYZ({
                tileSize: 512
            }))
        });

        var vector = new ol.layer.Vector({
            source: vectorSource,
            style: function (feature) {
                var classify = feature.get('activeprod');
                return style;
            }
        });

        var raster = new ol.layer.Tile({
            source: new ol.source.XYZ({
                attributions: 'Tiles © <a href="https://services.arcgisonline.com/ArcGIS/' +
                'rest/services/World_Topo_Map/MapServer">ArcGIS</a>',
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +
                'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'
            })
        });

        if (qry.length !== 0) {
        var map = new ol.Map({
            layers: [raster,vector],
            target: document.getElementById('map'),
            view: new ol.View({
                center: ol.proj.transform([-56.049, 38.485], 'EPSG:4326', 'EPSG:3857'),
                zoom: 3
            })
        });
        }
        else {
            var map = new ol.Map({
            layers: [raster],
            target: document.getElementById('map'),
            view: new ol.View({
                center: ol.proj.transform([-56.049, 38.485], 'EPSG:4326', 'EPSG:3857'),
                zoom: 3
            })
        });
        }


        var displayFeatureInfo = function (pixel) {
            var features = [];
            map.forEachFeatureAtPixel(pixel, function (feature) {
                features.push(feature);
            });
            if (features.length > 0) {
                var info = [];
                var i, ii;
                for (i = 0, ii = features.length; i < ii; ++i) {
                    info.push(features[i].get('field_name'));
                }
                document.getElementById('info').innerHTML = info.join(', ') || '(unknown)';
                map.getTarget().style.cursor = 'pointer';
            } else {
                document.getElementById('info').innerHTML = '&nbsp;';
                map.getTarget().style.cursor = '';
            }
                    //var resultFeatures = xel.features;
                    //Add graphic to the map graphics layer.
                    for (var i = 0, il = features.length; i < il; i++) {
                        var graphic = features[i];
                        graphic.setStyle(style);

                    }
        };

        map.on('pointermove', function (evt) {
            if (evt.dragging) {
                return;
            }
            var pixel = map.getEventPixel(evt.originalEvent);
            displayFeatureInfo(pixel);
        });

        map.on('click', function (evt) {
            displayFeatureInfo(evt.pixel);
        });
    </script>
</body>
</html>